#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# identify OS
os="unknown"
uname_os=$(uname -s)
if [ "$uname_os" = "Darwin" ]; then
  os="macos"
elif [ "$uname_os" = "Linux" ]; then
  os="linux"
elif [ "$uname_os" = "FreeBSD" ]; then
  os="freebsd"
elif [ "$uname_os" = "OpenBSD" ]; then
  os="openbsd"
elif [ "$uname_os" = "NetBSD" ]; then
  os="netbsd"
else
  echo "ERROR: Unsupported OS '$uname_os'"
  echo ""
  echo "Please report this issue:"
  echo "https://github.com/DopplerHQ/cli/issues/new?template=bug_report.md&title=[BUG]%20Unsupported%20OS"
  clean_exit 1
fi

log_debug "Detected OS '$os'"

# identify arch
arch="unknown"
uname_machine=$(uname -m)
if [ "$uname_machine" = "i386" ] || [ "$uname_machine" = "i686" ]; then
  arch="i386"
elif [ "$uname_machine" = "amd64" ] || [ "$uname_machine" = "x86_64" ]; then
  arch="amd64"
elif [ "$uname_machine" = "armv6" ] || [ "$uname_machine" = "armv6l" ]; then
  arch="armv6"
elif [ "$uname_machine" = "armv7" ] || [ "$uname_machine" = "armv7l" ]; then
  arch="armv7"
# armv8?
elif [ "$uname_machine" = "arm64" ]; then
  arch="arm64"
else
  echo "ERROR: Unsupported architecture '$uname_machine'"
  echo ""
  echo "Please report this issue:"
  echo "https://github.com/DopplerHQ/cli/issues/new?template=bug_report.md&title=[BUG]%20Unsupported%20architecture"
  clean_exit 1
fi

log_debug "Detected architecture '$arch'"

DOWNLOAD_URL="https://cli.doppler.com/download?os=$os&arch=$arch&format=tar"

filename="doppler-download.tar.gz"

curl --silent --retry 3 -o "$filename" -LN -D - "$DOWNLOAD_URL"

mkdir -p $BUILD_DIR/vendor/doppler
tar -zxvf $filename -C $BUILD_DIR/vendor/doppler

chmod +x $BUILD_DIR/vendor/doppler

mkdir -p $BUILD_DIR/.profile.d

cat <<'EOF' >$BUILD_DIR/.profile.d/pathsetup.sh
PATH="$PATH:/app/vendor/doppler"
EOF

cd "$BUILD_DIR" || exit

export DOPPLER_TOKEN=$(cat $ENV_DIR/DOPPLER_TOKEN)

# echo DOPPLER_TOKEN
echo "Quick test: $DOPPLER_TOKEN"

# Helper system to deal with heroku not dealing well with heroku-prebuild and yarn in the nodejs package
TARGET_DOPPLER_VARS=$(cat $ENV_DIR/TARGET_DOPPLER_VARS)
echo "TARGET_DOPPLER_VARS: $TARGET_DOPPLER_VARS"
if [ -z "$TARGET_DOPPLER_VARS" ]; then
  exit
fi

echo "Found TARGET_DOPPLER_VARS, attempting to extract and process..."

# So we have target_doppler_vars, lets split them out, then fetch and export the value from doppler
IFS=',' # Set the Internal Field Separator to comma
for VAR in $TARGET_DOPPLER_VARS; do # Iterate over the variables
  echo "Fetching $VAR from doppler"
  VALUE=$($BUILD_DIR/vendor/doppler/doppler secrets get $VAR --plain)
  # export the env var to >> $BP_DIR/export
  echo "export $VAR=$VALUE" >> $BP_DIR/export
done




